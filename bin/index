#!/usr/bin/env node
"use strict";

const intro = `
   ::    :::::   :::::  :::::: ::::::: :::::     ::::::  ::::::: ::   :::  :::::
 :+  :+ ++      +:      :+        :+  +:         ++   :+ +:      :++::++: ++   :+
+++++++ +#+:+#+ +#+:+#+ #+:+#     #+  +#+:+#+    ++   :+ +#+:+#  #+ ++ +# ++   :+
++   +#      #+      ++ #+        #+       ++    ++   #+ +#      #+    +# ++   #+
##   ##  #####   #####  ######    ##   #####     ######  ####### ##    ##  #####

`; // https://ascii-text-art.netlify.com/
console.log(intro);

const fs = require("fs"),
  browserSync = require("browser-sync"),
  assetsPath = "./assets";

// Check /assetsPath exists
if (!fs.existsSync(assetsPath)) {
  console.error("\nAssets-demo Error:\nNo assets folder found at", assetsPath);
  process.exit();
}

// Get list of assets
let assets = fs.readdirSync(assetsPath);

// Filter valid image filetypes
assets = assets.filter(asset => {
  let fileType = asset.split(".").pop();
  return [
    "jpg",
    "jpeg",
    "webp",
    "gif",
    "png",
    "apng",
    "svg",
    "bmp",
    "ico"
  ].includes(fileType);
});

// Create image cycling script
let script = `
var intro = ${JSON.stringify(intro)};
console.log(intro);
console.log('Total assets: ' + ${assets.length});

var assets = ${JSON.stringify(assets)};

// Natural filename sorting - https://stackoverflow.com/a/38641281
var collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});
assets = assets.sort(collator.compare);

function hashIndex() { return parseInt(window.location.hash.replace('#','')); }

function cycle() {
  var i = hashIndex();
  i = (i > ${assets.length - 1}) ? 1 : ++i;
  console.log('Asset cycle: ' + i);
  window.location.hash = i;
}

window.onhashchange = function() {
// window.onpopstate = function() {
    var i = hashIndex();
    let filename = assets[i-1],
    fileString = filename.split(".");
    fileString = fileString[fileString.length - 2]; // e.g. "image-name-768px"

    document.getElementById('asset').src = filename;

    // if ending in, say "-768px", use that as a max-width on the img element
    let widthMatches = fileString.match(/-[0-9]+px$/),
        width = 9999;
    if (widthMatches) {
        width = widthMatches[0].replace(/[^0-9]/g, ""); // e.g. 768
    }
    document.getElementById('asset').style.maxWidth = width + 'px';
}
window.location.hash = 1;
`;

// Create image caches (doesn't make all that much difference but no reason not to)
const imageCaches = assets.reduce((acc, asset) => {
  return acc + `<img src="${asset}" width="1" height="1" />`;
}, "");

// Generate an assets-demo.html file to go in /assetsPath
let html = `
<html>
<head>
<title>Assets Demo</title>
<style>
body {
    margin: 0;
  background: #cfcfcf
}
a {
  display: block;
  min-height: 100vh;
  min-width: 100%;
}
img {
  display: block;
  width: auto;
  max-width: 100%;
  margin: 0 auto;
  box-shadow: 0 0 100px rgba(0,0,0,0.2);
}
#preloader {
  position: absolute;
  left: -9999px;
  top:  -9999px;
}
#preloader img {
  display: block;
}
</style>
</head>
<body>
<a href="#" onClick="cycle(); return false;"><img id="asset" /></a>
<script>${script}</script>
<div class="preloader">${imageCaches}</div>
</body>
</html>
`;

// Save demo html to /assetsPath
fs.writeFileSync(`${assetsPath}/assets-demo.html`, html);

// Serve the html file (as it'll need to run the script)
browserSync(
  { server: assetsPath, open: "local", index: "assets-demo.html" },
  (err, bs) => {
    console.log(`Opening: ${assetsPath}/assets-demo.html`);
  }
);
